# -*- coding: utf-8 -*-
"""SMS Spam Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_Wfl6iOjibMO5CYcMoLl2CifpQUlb4i0
"""

# Including Libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Loading data into the dataset
sms_spam_dataset = pd.read_csv('/content/spam.csv', encoding='latin1')

#printing dataset
print(sms_spam_dataset)

# Checking first 5 rows of data
sms_spam_dataset.head()

# Checking last 5 rows of data
sms_spam_dataset.tail()

#checking number of rows and columns in the dataset
sms_spam_dataset.shape

# Replace null values with empty strings
sms_spam_dataset = sms_spam_dataset.fillna('')

# Label encoding: spam=0, ham=1
sms_spam_dataset['v1'] = (sms_spam_dataset['v1'] == 'spam').astype(int)

# Separating the data as text and labels
X = sms_spam_dataset['v2']
Y = sms_spam_dataset['v1']

# Split the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

# Feature Extraction: Converting text data into numerical data using TF-IDF
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# Training the model using Logistic Regression Algorithm
model = LogisticRegression()

# Training the model using the training data
model.fit(X_train_features, Y_train)

# Predicting on the test data
Y_pred = model.predict(X_test_features)

# Calculate accuracy
accuracy = accuracy_score(Y_test, Y_pred)
print("Accuracy:", accuracy*100)